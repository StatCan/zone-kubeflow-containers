#!/opt/conda/bin/python
"""
List files on filer with metadata, using mc ls.
"""

import argparse
import os
import sys
import subprocess

from filers_common import init_all_filers, get_mc_path


def list_filer(
    path: str,
    recursive: bool = False,
    summarize: bool = False,
    json: bool = False,
    debug_init: bool = False,
    debug_mc: bool = False,
    indicate_init_done_file: str = "/tmp/_filer_minio_client_init.done",
) -> int:
    "List files within filer directory, using MinIO client."

    # Initialize MinIO client aliases to filers.
    if not os.path.exists(indicate_init_done_file):
        init_all_filers(debug_print=debug_init)
    elif debug_init:
        print(
            (
                "Skip filer alias initialization as indicator file"
                f" {indicate_init_done_file} already exists."
            )
        )

    # Get MinIO path to filer directory.
    minio_path = get_mc_path(path)

    # Command: build as list, supporting additional options.
    cmd = [
        "mc",
        "ls",
        minio_path,
    ]

    if summarize:
        cmd.append("--summarize")
    if recursive:
        cmd.append("--recursive")
    if json:
        cmd.append("--json")
    if debug_mc:
        cmd.append("--debug")

    # Run the mc ls command.
    r = subprocess.run(
        cmd,
        check=False,
    )

    if r.returncode != 0:
        print(f"Error occurred running mc ls command, return code {r.returncode}.")
    return r.returncode


def main():
    "Invoked when running filer-mc-ls from command line."
    cmd_parser = argparse.ArgumentParser(
        description="List files on filer with metadata, using mc ls."
    )
    cmd_parser.add_argument("path", help="path to filer directory, file, or prefix")
    cmd_parser.add_argument(
        "-r",
        "--recursive",
        help="display summary information (number of objects, total size)",
        action="store_true",
    )
    cmd_parser.add_argument(
        "--summarize",
        help="display summary information (number of objects, total size)",
        action="store_true",
    )
    cmd_parser.add_argument(
        "--json",
        help="enable JSON lines formatted output",
        action="store_true",
    )
    cmd_parser.add_argument(
        "--debug-init",
        help="show debug information for initialization",
        action="store_true",
    )
    cmd_parser.add_argument(
        "--debug-mc",
        help="show debug information for MinIO client",
        action="store_true",
    )
    cmd_parser.add_argument(
        "--indicate-init-done-file",
        help=(
            "file that indicates initialization command as been executed, "
            "default /tmp/_filer_minio_client_init.done"
        ),
        default="/tmp/_filer_minio_client_init.done",
    )
    args = cmd_parser.parse_args()

    r = list_filer(
        args.path,
        debug_init=args.debug_init,
        debug_mc=args.debug_mc,
        recursive=args.recursive,
        summarize=args.summarize,
        json=args.json,
        indicate_init_done_file=args.indicate_init_done_file,
    )
    sys.exit(r)


if __name__ == "__main__":
    main()
