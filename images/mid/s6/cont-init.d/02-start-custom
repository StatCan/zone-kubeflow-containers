#!/command/with-contenv bash

echo "--------------------Starting up--------------------"

# create directory to store env vars for s6-overlay
S6_ENV="/run/s6-env"
[ -d "${S6_ENV}" ] || mkdir -p "${S6_ENV}"

# Introduced by RStudio 1.4
# See https://github.com/jupyterhub/jupyter-rsession-proxy/issues/95
# And https://github.com/blairdrummond/jupyter-rsession-proxy/blob/master/jupyter_rsession_proxy/__init__.py
export RSERVER_WWW_ROOT_PATH=$NB_PREFIX/rstudio
echo ${RSERVER_WWW_ROOT_PATH} > ${S6_ENV}/RSERVER_WWW_ROOT_PATH

export NB_NAMESPACE=$(echo $NB_PREFIX | awk -F '/' '{print $3}')
echo ${NB_NAMESPACE} > ${S6_ENV}/NB_NAMESPACE

export JWT="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
echo ${JWT} > ${S6_ENV}/JWT

# Setup environment variables for R and Rstudio
echo "NB_PREFIX=${NB_PREFIX}" >> /opt/conda/lib/R/etc/Renviron
echo "NB_NAMESPACE=$NB_NAMESPACE" >> /opt/conda/lib/R/etc/Renviron
echo "NLS_LANG=$NLS_LANG" >> /opt/conda/lib/R/etc/Renviron
printenv | grep KUBERNETES >> /opt/conda/lib/R/etc/Renviron
echo "SPARK_HOME=${SPARK_HOME}" >> /opt/conda/lib/R/etc/Renviron

# Retrieving Alias file for oracle client
# Runs on every startup because this output location is not persisted storage
# Implemented with a retry because it sometimes fails for some reason
echo "Retrieving Oracle tnsnames file"
GIT_ORACLE_SNIPPET="https://gitlab.k8s.cloud.statcan.ca/business-transformation/aaw/aaw-contrib-containers/snippets/515.git"
ORACLE_ADMIN_PATH="/opt/oracle/instantclient_23_5/network/admin"
RETRIES_NO=5
RETRY_DELAY=3
# for i in $(seq 1 $RETRIES_NO); do
#   test -z "$GIT_ORACLE_SNIPPET" || git clone "$GIT_ORACLE_SNIPPET" "${ORACLE_ADMIN_PATH}/515" \
#     && mv "${ORACLE_ADMIN_PATH}/515/tnsnames.ora" "${ORACLE_ADMIN_PATH}" \
#     && rm -rf "${ORACLE_ADMIN_PATH}/515" \
#     && break
#   echo "Failed to clone the tnsnames.ora file. Attempt $i of $RETRIES_NO"
#   #if it ran all the retries, exit
#   [[ $i -eq $RETRIES_NO ]] && echo "Failed to clone the tnsnames.ora after $RETRIES_NO retries"
#   sleep ${RETRY_DELAY}
# done
echo "Cloning Oracle alias file"
git clone "$GIT_ORACLE_SNIPPET" "${ORACLE_ADMIN_PATH}/515"
mv "${ORACLE_ADMIN_PATH}/515/tnsnames.ora" "${ORACLE_ADMIN_PATH}"
rm -rf "${ORACLE_ADMIN_PATH}/515"

# Retrieve service account details
serviceaccountname=`kubectl get secret artifactory-creds -n $NB_NAMESPACE --template={{.data.Username}} | base64 --decode`
serviceaccounttoken=`kubectl get secret artifactory-creds -n $NB_NAMESPACE --template={{.data.Token}} | base64 --decode`
# Point conda to Artifactory repository
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-forge-remote/
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-pytorch-remote/
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-nvidia-remote/
conda config --remove channels 'defaults'
conda config --remove channels conda-forge --system

pip config set global.index-url https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/api/pypi/pypi/simple

# if rprofile doesnt exist
if [ ! -d "/opt/conda/lib/R/etc/Rprofile.site" ]; then
  echo "Creating rprofile"
  cat > /opt/conda/lib/R/etc/Rprofile.site<< EOF
options(jupyter.plot_mimetypes = c('text/plain', 'image/png', 'image/jpeg', 'image/svg+xml', 'application/pdf'))
local({
  r <- list("cran-remote" = "https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/rpug-cran/")
  options(repos = r)
})
EOF
fi

# Configure the language
if [ -n "${KF_LANG}" ]; then
    if [ "${KF_LANG}" = "en" ]; then
        export LANG="en_US.utf8"
        echo ${LANG} > ${S6_ENV}/LANG
    else
        export LANG="fr_FR"
        echo ${LANG} > ${S6_ENV}/LANG

        lang_file="/home/${NB_USER}/.jupyter/lab/user-settings/@jupyterlab/translation-extension/plugin.jupyterlab-settings"
        mkdir -p "$(dirname "${lang_file}")" && touch $lang_file
        ( echo    '{'
          echo     '   // Langue'
          echo     '   // @jupyterlab/translation-extension:plugin'
          echo     '   // Paramètres de langue.'
          echo  -e '   // ****************************************\n'
          echo     '   // Langue locale'
          echo     '   // Définit la langue d'\''affichage de l'\''interface. Exemples: '\''es_CO'\'', '\''fr'\''.'
          echo     '   "locale": "'${LANG}'"'
          echo     '}'
        ) > $lang_file
        vscode_language="${CS_DEFAULT_HOME}/User/argv.json"
        echo "{\"locale\":\"fr\"}" >> $vscode_language
    fi
fi

echo "language has been configured"

# Prevent core dump file creation by setting it to 0. Else can fill up user volumes without them knowing
ulimit -c 0 