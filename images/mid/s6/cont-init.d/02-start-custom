#!/command/with-contenv bash

echo "--------------------Starting up--------------------"

# create directory to store env vars for s6-overlay
S6_ENV="/run/s6-env"
[ -d "${S6_ENV}" ] || mkdir -p "${S6_ENV}"

# Step up Git Credential Manager
# only if it wasn't already setup
if grep -q "export GPG_TTY" ~/.bashrc; then
  echo "Git Credential Manager already setup"
else
  echo "Setting up Git Credential Manager"

  git config --global credential.credentialStore gpg
  git config --global credential.helper manager
  echo "export GPG_TTY=\$(tty)" >> ~/.bashrc
fi

# Configure the shell! If not already configured.
if [ ! -f /home/$NB_USER/.zsh-installed ]; then
    if [ -f /tmp/oh-my-zsh-install.sh ]; then
      sh /tmp/oh-my-zsh-install.sh --unattended --skip-chsh
    fi

    if conda --help > /dev/null 2>&1; then
      conda init bash
      conda init zsh
    fi
    cat /tmp/shell_helpers.sh >> /home/$NB_USER/.bashrc
    cat /tmp/shell_helpers.sh >> /home/$NB_USER/.zshrc
    touch /home/$NB_USER/.zsh-installed
    touch /home/$NB_USER/.hushlogin
fi

# add rm wrapper:
# https://jirab.statcan.ca/browse/ZPS-40
if [ ! -f /home/$NB_USER/.local/bin/rm ]; then
  echo "adding rm wrapper"
  
  mkdir -p /home/$NB_USER/.local/bin/
  git clone https://gitlab.k8s.cloud.statcan.ca/zone/build-scripts/snippets/415.git /home/$NB_USER/.local/bin/rm-git
  mv /home/$NB_USER/.local/bin/rm-git/rm /home/$NB_USER/.local/bin/rm
  rm -rf /home/$NB_USER/.local/bin/rm-git
  chmod +x /home/$NB_USER/.local/bin/rm
else
  echo "rm wrapper already exists"
fi

export VISUAL="/usr/bin/nano"
echo ${VISUAL} > ${S6_ENV}/VISUAL

export EDITOR="$VISUAL"
echo ${EDITOR} > ${S6_ENV}/EDITOR

echo "shell has been configured"

# create .profile
cat <<EOF > $HOME/.profile
if [ -n "$BASH_VERSION" ]; then
    if [ -f "$HOME/.bashrc" ]; then
        . "$HOME/.bashrc"
    fi
fi
EOF

echo ".profile has been created"

# Configure KFP multi-user
if [ -n "${NB_NAMESPACE}" ]; then
mkdir -p $HOME/.config/kfp
cat <<EOF > $HOME/.config/kfp/context.json
{"namespace": "${NB_NAMESPACE}"}
EOF
fi

echo "KFP multi-user has been configured"

# Introduced by RStudio 1.4
# See https://github.com/jupyterhub/jupyter-rsession-proxy/issues/95
# And https://github.com/blairdrummond/jupyter-rsession-proxy/blob/master/jupyter_rsession_proxy/__init__.py
export RSERVER_WWW_ROOT_PATH=$NB_PREFIX/rstudio
echo ${RSERVER_WWW_ROOT_PATH} > ${S6_ENV}/RSERVER_WWW_ROOT_PATH

# Remove a Jupyterlab 2.x config setting that breaks Jupyterlab 3.x
NOTEBOOK_CONFIG="$HOME/.jupyter/jupyter_notebook_config.json"
NOTEBOOK_CONFIG_TMP="$HOME/.jupyter/jupyter_notebook_config.json.tmp"

if [ -f "$NOTEBOOK_CONFIG" ]; then
  jq 'del(.NotebookApp.server_extensions)' "$NOTEBOOK_CONFIG" > "$NOTEBOOK_CONFIG_TMP" \
      && mv -f "$NOTEBOOK_CONFIG_TMP" "$NOTEBOOK_CONFIG"
fi

echo "broken configuration settings removed"

export NB_NAMESPACE=$(echo $NB_PREFIX | awk -F '/' '{print $3}')
echo ${NB_NAMESPACE} > ${S6_ENV}/NB_NAMESPACE

export JWT="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
echo ${JWT} > ${S6_ENV}/JWT

# Setup environment variables for R and Rstudio
echo "NB_PREFIX=${NB_PREFIX}" >> /opt/conda/lib/R/etc/Renviron
echo "NB_NAMESPACE=$NB_NAMESPACE" >> /opt/conda/lib/R/etc/Renviron
echo "NLS_LANG=$NLS_LANG" >> /opt/conda/lib/R/etc/Renviron
printenv | grep KUBERNETES >> /opt/conda/lib/R/etc/Renviron
echo "SPARK_HOME=${SPARK_HOME}" >> /opt/conda/lib/R/etc/Renviron

echo "Checking for .condarc file in hom directory"
if [[ -f "$HOME/.condarc" ]]; then
  echo ".condarc file exists, not going to do anything"
else
  echo "Creating basic .condarc file"
  printf 'envs_dirs:\n  - $HOME/.conda/envs' > $HOME/.condarc
fi

# Copy default config and extensions on first start up
if [ ! -d "$CS_DEFAULT_HOME/Machine" ]; then
  echo "Creating code-server default settings and extentions"
  mkdir -p "$CS_DEFAULT_HOME"
  cp -r "$CS_TEMP_HOME/." "$CS_DEFAULT_HOME"
fi

# Create default user directories
WORKSPACE_DIR="$HOME/workspace"
REPO_DIR="$WORKSPACE_DIR/repositories"
DATA_DIR="$WORKSPACE_DIR/data"
VSCODE_DIR="$WORKSPACE_DIR/.vscode"
VSCODE_SETTINGS="$VSCODE_DIR/settings.json"
PYTHON_PATH="/opt/conda/bin/python"
VSCODE_USER_DIR="$HOME/.local/share/code-server/User"

echo "Ensuring workspace directories exist..."
[ -d "$WORKSPACE_DIR" ] || mkdir -p "$WORKSPACE_DIR"
[ -d "$REPO_DIR" ] || mkdir -p "$REPO_DIR"
[ -d "$DATA_DIR" ] || mkdir -p "$DATA_DIR"
[ -d "$VSCODE_DIR" ] || mkdir -p "$VSCODE_DIR"
[ -d "$VSCODE_USER_DIR" ] || mkdir -p "$VSCODE_USER_DIR"

# Set Python interpreter path for VSCode if not already set
if [ ! -f "$VSCODE_SETTINGS" ]; then
  echo "Python default settings for VSCode..."
  echo "{\"python.defaultInterpreterPath\": \"$PYTHON_PATH\", \"python.languageServer\": \"Jedi\"}" > "$VSCODE_SETTINGS"
fi

if [ ! -f "$VSCODE_USER_DIR/settings.json" ]; then
  echo "Python default user settings for VSCode..."
  echo "{\"python.languageServer\": \"Jedi\"}" > "$VSCODE_USER_DIR/settings.json"
fi

# Add sasstudio default
if [[ -z "${SASSTUDIO_TEMP_HOME}" ]]; then
  echo "No sas studio default settings created"
else
  echo "Creating sas studio default settings"
  mkdir -p "$HOME/.sasstudio"
  cp -r "$SASSTUDIO_TEMP_HOME/." "$HOME/.sasstudio"
fi

# Retrieve service account details
serviceaccountname=`kubectl get secret artifactory-creds -n $NB_NAMESPACE --template={{.data.Username}} | base64 --decode`
serviceaccounttoken=`kubectl get secret artifactory-creds -n $NB_NAMESPACE --template={{.data.Token}} | base64 --decode`
# Point conda to Artifactory repository
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-forge-remote/
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-pytorch-remote/
conda config --add channels https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/conda-nvidia-remote/
conda config --remove channels 'defaults'
conda config --remove channels conda-forge --system

pip config set global.index-url https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/api/pypi/pypi/simple

# if rprofile doesnt exist
if [ ! -d "/opt/conda/lib/R/etc/Rprofile.site" ]; then
  echo "Creating rprofile"
  cat > /opt/conda/lib/R/etc/Rprofile.site<< EOF
options(jupyter.plot_mimetypes = c('text/plain', 'image/png', 'image/jpeg', 'image/svg+xml', 'application/pdf'))
local({
  r <- list("cran-remote" = "https://$serviceaccountname:$serviceaccounttoken@artifactory.cloud.statcan.ca/artifactory/rpug-cran/")
  options(repos = r)
})
EOF
fi

# Configure the language
if [ -n "${KF_LANG}" ]; then
    if [ "${KF_LANG}" = "en" ]; then
        export LANG="en_US.utf8"
        echo ${LANG} > ${S6_ENV}/LANG
    else
        export LANG="fr_FR"
        echo ${LANG} > ${S6_ENV}/LANG

        lang_file="/home/${NB_USER}/.jupyter/lab/user-settings/@jupyterlab/translation-extension/plugin.jupyterlab-settings"
        mkdir -p "$(dirname "${lang_file}")" && touch $lang_file
        ( echo    '{'
          echo     '   // Langue'
          echo     '   // @jupyterlab/translation-extension:plugin'
          echo     '   // Paramètres de langue.'
          echo  -e '   // ****************************************\n'
          echo     '   // Langue locale'
          echo     '   // Définit la langue d'\''affichage de l'\''interface. Exemples: '\''es_CO'\'', '\''fr'\''.'
          echo     '   "locale": "'${LANG}'"'
          echo     '}'
        ) > $lang_file
        vscode_language="${CS_DEFAULT_HOME}/User/argv.json"
        echo "{\"locale\":\"fr\"}" >> $vscode_language
    fi
fi

echo "language has been configured"

# Prevent core dump file creation by setting it to 0. Else can fill up user volumes without them knowing
ulimit -c 0 