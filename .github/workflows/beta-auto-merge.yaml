name: Merge to Beta
on:
  schedule:
    # Every wednesdays, at 2/3 am(EST/EDT)
    - cron: "0 7 * * WED"

jobs:
  get-bi-weekly-schedule:
    runs-on: ubuntu-latest
    outputs:
      biweekly: ${{ steps.get-biweekly-modulo.outputs.biweekly }}
    steps:
      # Step to determine the week number in the year, to run this job bi-weekly
      # cron schedule doesn't support "every 2 weeks" scenarios.
      # runs on alternating weeks from the beta-promote.yaml workflow
      - name: Get bi-weekly week number value
        id: get-biweekly-modulo
        run: |
          numWeek=$(date +%U)
          echo "biweekly=$((numWeek % 2))" >> $GITHUB_OUTPUT
          echo "This is week #$numWeek, biweekly modulo is at $((numWeek % 2))."
          echo "Job will run on value==0"

  auto-merge-beta-prs:
    runs-on: ubuntu-latest
    needs: get-bi-weekly-schedule
    if: ${{ needs.get-bi-weekly-schedule.outputs.biweekly == 0 }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: "Merge ready for beta PRs"
      run: |
        # Get list of PR numbers with label "read for beta"
        # pr_list format is "1 24 43 11"
        pr_list=$(gh pr list -l "ready for beta" --json number --jq "[.[].number] | @sh")

        for i in $pr_list
        do
            # for each PR, get their relevant info
            prInfo=$(gh pr view $i --json baseRefName,mergeStateStatus,isDraft,mergeable,title,reviewDecision)
            targetBranch=$(echo $prInfo | jq ".baseRefName")
            mergeState=$(echo $prInfo | jq ".mergeStateStatus")
            isDraft=$(echo $prInfo | jq ".isDraft")
            isMergeable=$(echo $prInfo | jq ".mergeable")
            title=$(echo $prInfo | jq ".title")
            review=$(echo $prInfo | jq ".reviewDecision")

            # if PR matches all our conditions, merge it
            if [[ "$targetBranch" == '"beta"'
                && "$mergeState" == '"CLEAN"'
                && $isDraft == false
                && $isMergeable == '"MERGEABLE"'
                && $review == '"APPROVED"' ]]; then
                
                echo "Merging PR #$i - $title"
                gh pr merge $i --delete-branch --squash
            else
                echo "NOT merging PR #$i - $title"
                echo ""
                echo "Target branch should be "beta": is $targetBranch"
                echo "Merge state should be "CLEAN": is $mergeState"
                echo "Should not be in draft. Is draft: $isDraft"
                echo "Should be mergeable. Is mergeable: $isMergeable"
                echo "Should be reviewed. Review is: $review"
            fi
            echo "----------------------------"
        done

    - name: check for changes
      run: |
        # get the latest tag
        latestTag=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "Latest tag found is: $latestTag"
        echo "latestTag=$latestTag" >> "$GITHUB_ENV"

        betaDiff=$(git log $latestTag..origin/beta --oneline)
        echo "The diff between the latest tag and beta is $betaDiff"
        if [[ -n $betaDiff ]]; then
          echo "Diff found"
          echo "isDiff=true" >> "$GITHUB_ENV"
        else
          echo "No diff found"
          echo "isDiff=false" >> "$GITHUB_ENV"
        fi

    - name: Create new release release
      if: env.isDiff == 'true'
      run: |
        # returns the current date in YYYY-MM-DD format
        date=$(date +%F) 
        echo "New tag is $date"

        echo "Auto generated release notes will be compared to previous tag $latestTag"

        # create the release
        gh release create $date --latest --generate-notes --target=beta --notes-start-tag $latestTag