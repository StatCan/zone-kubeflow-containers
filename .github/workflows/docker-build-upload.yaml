name: Download a parent image, build a new one, tag it, then upload the image

env:
  HADOLINT_VERSION: "2.12.0"

on:
  workflow_call:
    inputs:
      directory:
        description: The directory of the image files
        required: true
        type: string
      image:
        description: Image name
        required: true
        type: string
      base-image:
        description: The base image to build from if not located on our own repo
        required: false
        type: string
      registry-name:
        description: url of the registry <registy-name>
        required: true
        type: string
      branch-name:
        description: The name of the current branch 
        required: true
        type: string
    secrets:
      REGISTRY_USERNAME:
        description: The username for the container registry
        required: true
      REGISTRY_PASSWORD:
        description: The password for the container registry
        required: true

jobs:
  build-upload:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - uses: actions/checkout@v4

      - name: Run Hadolint
        run: |
          sudo curl -L https://github.com/hadolint/hadolint/releases/download/v${{ env.HADOLINT_VERSION }}/hadolint-Linux-x86_64 --output hadolint
          sudo chmod +x hadolint
          ./hadolint images/${{ inputs.directory }}/Dockerfile --no-fail

      - name: Echo disk usage before clean up
        run: ./.github/scripts/echo_usage.sh

      - name: Free up all available disk space before building
        run: ./.github/scripts/cleanup_runner.sh

      - name: Echo disk usage before build start
        run: ./.github/scripts/echo_usage.sh

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ inputs.registry-name }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set short SHA
        run: |
          shortSha=$(git rev-parse --short ${{ github.sha}})
          echo "COMMIT_SHORT_SHA=$shortSha"
          echo "COMMIT_SHORT_SHA=$shortSha" >> $GITHUB_ENV

      # make build emits full_image_name, image_tag, and image_repo outputs
      - name: Build image
        id: build-image
        run: |
          docker buildx bake ${{ inputs.image }} \
            --set ${{ inputs.image }}.args.BASE_IMAGE=${{ inputs.base-image }} \
            --set ${{ inputs.image }}.tags=${{ inputs.registry-name }}/${{ inputs.image }}:${{inputs.branch-name}}
            --set ${{ inputs.image }}.tags=${{ inputs.registry-name }}/${{ inputs.image }}:${{env.COMMIT_SHORT_SHA}}
            --set ${{ inputs.image }}.tags=${{ inputs.registry-name }}/${{ inputs.image }}:${{github.sha}}

      - name: Echo disk usage after build completion
        run: ./.github/scripts/echo_usage.sh

      # - name: Add standard tags (short sha, sha, and branch) and any other post-build activity
      #   if: ${{ inputs.branch-name != 'master' }}
      #   run: make post-build/${{ inputs.image }} REPO=${{ inputs.registry-name }}

      # - name: Add master and standard tags (v2, latest; short sha, sha, and branch) and any other post-build activity
      #   if: ${{ inputs.branch-name == 'master' }}
      #   run: make post-build/${{ inputs.image }} REPO=${{ inputs.registry-name }} IMAGE_VERSION=v2 IS_LATEST=true
      - name: Add master tags(v2, latest)
        if: ${{ inputs.branch-name == 'master' }}
        run: |
          docker tag ${{ inputs.registry-name }}/${{ inputs.image }} ${{ inputs.registry-name }}/${{ inputs.image }}:v2
          docker tag ${{ inputs.registry-name }}/${{ inputs.image }} ${{ inputs.registry-name }}/${{ inputs.image }}:latest

      - name: Push image to registry (default pushes all tags)
        run: make push/${{ inputs.image }} REPO=${{ inputs.registry-name }}

      # Free up space from build process (containerscan action will run out of space if we don't)
      - run: ./.github/scripts/cleanup_runner.sh
